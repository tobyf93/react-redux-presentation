------------------------
ECMASCRIPT 6
------------------------
- Modules
  - No control over variables.  window.$ takens on the jQuery library.  Other libraries may also use this...
  - Handling multiple files
    - Multiple script tags, multiple HTTP requests
    - Concat javascript files, one HTTP request
      - This is good but we can do better with Webpack
  - Tracking library dependencies
    - Have to sift through source to find 3rd party calls
    - Library isn't modular with dependencies

------------------------
JQUERY
------------------------
- What
  - Plugins attach to $.fn, just need to follow jQuery's chaining architecture
  - JavaScript for designers
    - Use of CSS selectors
  - A trap
    - Developers learning jQuery before they full understand JavaScript

------------------------
SINGLE PAGE APPS
------------------------
- Gave code a lot more structure
- Separation of concerns: MVC example

------------------------
REACT
------------------------
- They are willing to implement it in Facebook, Instagram, Whatsapp
- Google, Angular, reluctant to follow suit

- Airbnb
  - Demo of site
  - Was originally Ruby on Rails (MVC Framework)
  - Multipage structure with React components
  - Eventual transition to SPA
- Atlassian
  - Biggest tech company in Australia
  - Originally in Django (python), MVT (model-view-template)
  - Again, multipage being phased out for React
  - Rebuilding HipChat in React over Angular (MVC) and Ember (Model-view-viewmodel)
  - Have experience in Angular from previous employment, would pick React every time
- Dropbox
- Netflix
  - Biggest video streaming service
  - Wanted to improve readability, complexity of app
  - Had teams develop new UI's in jQuery, Backbone and React and measured performance
  - React won
  - Able to do a total rewrite in a few months
  - Modularity meant better A/B testing
  - Faster to bring people up to speed
  - Using falcor for state management

- jQuery style vs React style
  - render() doesn't necessarily mean DOM change
  - Virtual DOM

------------------------
REDUX
------------------------
- Data flow
  - Still uni-directional
  - Single store without the need for dispatcher
  - Store doesn't need to register any callbacks
  - Very lightweight flux implementation
    - naive redux is 99 LOC
    - Without comments and sanity checks
- Change Logs
  - Console logging previous state, action, new state
  - Proved tricky in flux with multiple stores representing different parts of state
- Debugging
  - Reducer is able to keep track of state over time
  - Can replay actions to get app into certain state
    - Can pinpoint when a bug is introduced
  - Enables undo/redo features very easily
- Hot Reloading
  - Flux had stores managing data AND processing of actions
  - Redux uses the reducer to modify state.
  - Reducers can be hot reloaded without affecting app state
- Re-hydration of store
  - We know that redux has a single javascript object to represent state
  - This can be serialized and sent to server
  - Client can later re-hydrate store with server-side store state
